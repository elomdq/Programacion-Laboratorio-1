///*************************************************************************************************************************///
///*************************************************************************************************************************///
///                                                  FUNCIONES                                                              ///
///*************************************************************************************************************************///
///*************************************************************************************************************************///


///Ejercicio 1

int cargarArregloIntTeclado(int a[], int capacidad)
{
    int i=0;
    char c='s';

    while(i<capacidad && c!='n')
    {
        printf("\nIngrese un n%cmero para cargar: ", 163);
        scanf("%d", &a[i]);

        i++;

        printf("\nDesea cargar otro n%cmero? s/n", 163);
        fflush(stdin);
        c = getch();

        system("cls");
    }

    return i; //Devuelvo la cantidad de elementos validos en el arreglo
}

///Ejercicio 2

void mostrarArreglo(int a[], int validos)
{
    int i;

    //printf("\nElementos del Arreglo: \n\n");

    for(i=0; i<validos; i++)
    {
        printf(" %d |", a[i]);
    }

    printf("\n");
}

///Ejercicio 3

int sumaDeElementos(int a[], int validos)
{

    int i, suma=0;

    for(i=0; i<validos; i++)
    {
        suma = suma + a[i];
    }

    return suma;
}


///Ejercicio 4

void copiarEnPila(int a[], int validos, Pila * p)
{
    int i;

    for(i=0; i<validos; i++)
    {
        apilar(p, a[i]);
    }
}

///Ejercicio 5

int cargarArregloFloatTeclado(float b[], int capacidad)
{
    int i=0;
    char c='s';

    while(i<capacidad && c!='n')
    {
        printf("\nIngrese un n%cmero para cargar: ", 163);
        scanf("%f", &b[i]);

        i++;

        printf("\nDesea cargar otro n%cmero? s/n", 163);
        fflush(stdin);
        c = getch();

        system("cls");
    }

    return i;
}

float sumaElementosFloat(float b[], int validos)
{
    float suma=0;
    int i;

    for(i=0; i<validos; i++)
    {
        suma = suma + b[i];
    }

    return suma;
}


///Ejercicio 6

int cargarArregloChar(char ch[], int dimension)
{
    int i;
    char c='s';

    i=0;

    while(i<dimension && c!='n')
    {
        printf("\n-> Ingresa una letra: ");
        fflush(stdin);
        scanf("%c", &ch[i]);
        i++;

        printf("\n\nQuieres ingresar otra letra m%cs? (s/n): ", 160);
        fflush(stdin);
        c = getch();
        system("cls");
    }

    return i;
}

int cargarArregloCharRandom(char ch[], int dimension)
{
    int i=0, acsii, limite /*, flag*/ ;

    srand(time(NULL));

    limite = rand()%(dimension) +1; // Lo que hago es generar un limite no mayor a la dimension.

    while(i<limite)
    {
        acsii = (rand()%26)+97; // Esto me da un número entre el 97 y el 122 que en el codigo ASCII representa un caracter de la 'a' a la 'z'.
        ch[i]=acsii;
        i++;

        /*flag = rand()%2; ///estas sentencias son para agregar espacios.
        if(flag==0)
        {
            ch[i]=32;
            i++;
        }*/
    }

    return limite;
}

bool encontrarElementoArregloChar(char ch[], int validos, char caracter)
{
    int i=0;
    bool estado=false;

    while(i<validos || ch[i] == caracter)
    {
        if(ch[i]==caracter)
        {
            estado = true;
        }
        i++;
    }

    return estado;
}


/// EJERCICIO 7


int insertarCaracterEnArreglo(char ch[], int validos, char caracter)
{
    int i;

    i = validos - 1;

    while(i>=0 && ch[i]>caracter)  //comienzo desde el final del arreglo y no me detengo hasta que termine de recorrerlo o el caracter en la posicion i sea menor que el formal
    {
        ch[i+1]=ch[i]; //Si el caracter es mayor lo voy corriendo un espacio en direccion al final
        i--;
    }

    ch[i+1]=caracter;  //ubico el caracter en su posicion

    return validos+1; //los elementos se incrementaron en 1
}



///Ejercicio 8

char buscarMaxCaracter(char ch[], int validos)
{
    int i=0;
    char c;

    if(validos!=0)  //antes de arrancar controlo que el arreglo no este vacio
    {
        c=ch[i]; //igualo una variable auxiliar con el primer elemento del arreglo
        for(i=1; i<validos; i++) //recorro todo el arreglo controlando el tamaño de los elementos con el del auxiliar
        {
            if(ch[i]>c)
            {
                c=ch[i]; //si el elemento es menor cambio el del auxiliar por ese
            }
        }
    }

    return c;
}


///Ejercicio 9


bool arregloCapicuaInt(int a[], int validos)
{
    bool capicua;
    int i=0, j=validos/2;

    while(i<j && a[i]==a[validos-1]) // recorro el arreglo hasta la mitad pero desde los dos extremos, mientras las posiciones comparadas sean iguales o que se pasen de la mitad
    {
        i++;  // voy subiendo una posicion
        validos--; //voy bajando una posicion
    }

    if(i==j) // si i es igual a j, quiere decir que el algoritmo recorrio todo el arreglo sin problemas
    {
        capicua = true;
    }
    else  //si no lo es quiere decir que se detuvo antes porque 2 valores fueron distintos
    {
        capicua = false;
    }

    return capicua;
}


bool arregloCapicuaChar(char ch[], int validos)
{
    bool capicua;
    int i=0, j=validos/2;

    while(i<j && ch[i]==ch[validos-1])
    {
        i++;
        validos--;
    }

    if(i==j)
    {
        capicua = true;
    }
    else
    {
        capicua = false;
    }

    return capicua;
}


/// EJERCICIO 10

void invertirArregloInt(int a[], int validos)
{
    int i, j=validos/2, aux;

    for(i=0; i<j; i++)  //nuevamente recorro el arreglo una cantidad de veces igual a la mitad pero desde los dos extremos
    {
        aux = a[i];             //almaceno el valor en posicion i en un auxiliar
        a[i] = a[validos-1];    //cambio el valor en la posicion i por el de la posicion simetrica en si extremo final
        a[validos-1]= aux;      //cambio el valor de ese extremo por el de i original que estaba guardado en una var auxiliar
        validos--;              //disminuyo la posicion final, el for ya aumenta la posicion inicial
    }
}

void invertirArregloChar(char ch[], int validos)
{
    int i, j=validos/2, aux;

    for(i=0; i<j; i++)
    {
        aux = ch[i];
        ch[i] = ch[validos-1];
        ch[validos-1]= aux;
        validos--;
    }
}


/// EJERCICIO 11

/// ORDENACION POR SELECCION

void ordenarArregloInt_Seleccion(int a[], int validos)
{

    int i, posMenor, aux;

    for(i=0; i<validos-1; i++) //recorro todo el arreglo
    {
        posMenor = encontrarPosicionMenorInt(a, validos, i);  //voy comparando el valor de la posicion en i con el resto de valores para encontrar el menor y obtener su posicion
        aux = a[i];                 //guardo el valor en la posicion i para ubicarlo luego
        a[i] = a[posMenor];         //intercambio el valor de la posicion i por el del menor encontrado
        a[posMenor] = aux;          //y el valor orignal de i se ubica en el de la posicion del menor intercambiado
    }  //vuelvo a repetir aumentando en una posicion, de esta manera todo lo que esta detras de i va quedando ordenado de menor a mayor (para este caso)

}

int encontrarPosicionMenorInt(int a[], int validos, int posInicial) //con esta funcion devuelvo la posicion del menor elemento comparando con el de la posicion pasado por parametro
{
    int i=posInicial, posMin, valorMin;

    if(validos!=0) //si el arreglo no esta vacio
    {
        valorMin = a[i];    //guardo el valor de la posicion i, que la considero como el minimo
        posMin = i;         //guardo la posicion i

        for(i=(i+1); i<validos; i++)  //recorro todo el arreglo desde la posicion i
        {
            if(a[i]<valorMin)   //si uno de los valores es menor que el valor guardado se cambia por ese hallado
            {
                valorMin = a[i];
                posMin = i;
            }
        }
    }

    return posMin; //devuelvo la posicion del valor minimo
}


void ordenarArregloChar_Seleccion(char ch[], int validos)
{
    int i, posMenor;
    char  aux;

    for(i=0; i<validos-1; i++)
    {
        posMenor = encontrarPosicionMenorChar(ch, validos, i);
        aux = ch[i];
        ch[i] = ch[posMenor];
        ch[posMenor] = aux;
    }
}

int encontrarPosicionMenorChar(char ch[], int validos, int posInicial)
{
    int i=posInicial, posMin;
    char charMin;

    if(validos!=0)
    {
        charMin = ch[i];
        posMin = i;

        for(i=(i+1); i<validos; i++)
        {
            if(ch[i]<charMin)
            {
                charMin = ch[i];
                posMin = i;
            }
        }
    }

    return posMin;
}

/// ORDENACION POR INSERCION


void ordenarArregloInt_Insercion(int a[], int validos)
{
    int i=0;

    for(i=0; i<validos-1; i++)      //recorro todo el arreglo valido
    {
        insertarEnInt(a, i, a[i+1]);      //voy insertando de manera ordenada en el arreglo el valor siguiente al de la posicion enviada como parametro, que seria tomada como la final del arreglo
    }
}

void insertarEnInt(int a[], int posFinal, int valor) //esta funcion inserta pero de manera ordenada
{
    int i;

    i = posFinal;   //considero a i como la posicion final valida de elementos a comparar

    while(i>=0 && a[i]>valor)  //recorro el areglo hacia el inicio y hasta que un valor sea menor que el enviado por parametro
    {
        a[i+1]=a[i];    //voy corriendo de posicion los valores que voy comparando
        i--;    //disminuyo i para ir recorriendo hasta la posicion 0 del arreglo
    }

    a[i+1]=valor;   //una vez encontrada la posicion (o recorrido todo el arreglo) ubico el valor pasado por parametro
}

void ordenarArregloChar_Insercion(char ch[], int validos)
{
    int i=0;

    for(i=0; i<validos-1; i++)
    {
        insertarEnChar(ch, i, ch[i+1]);
    }

}

void insertarEnChar(char ch[], int posFinal, char letra)
{
    int i;

    i = posFinal;

    while(i>=0 && ch[i]>letra)
    {
        ch[i+1]=ch[i];
        i--;
    }

    ch[i+1]=letra;
}


/// EJERCICIO 12

void intercalarArreglosInt(int a[], int b[], int validosA, int validosB, int c[]) //paso por parametro los 3 arreglos y 2 dimensiones validas, tomo como limite para el tercero la suma de las otras 2
{
    int i=0, validosC, aux=0;

    validosC = validosA + validosB;

    while(aux<validosC) //recorro ambos arreglos hasta llegar al limite de C
    {
        if(i<validosA)  //chequeo no pasarme de la posicion de validos de A
        {
            aux = insertarIntEnArreglo(c, aux, a[i]);   //inserto en C el valor de A en la posicion i, y esto aumenta el valor de validos en C (aux aumenta en 1)
        }

        if(i<validosB)  //chequeo no pasarme de la posicion de validos de A
        {
            aux = insertarIntEnArreglo(c, aux, b[i]);   //inserto en C el valor de B en la posicion i, y esto aumenta el valor de validos en C (aux aumenta en 1)
        }
        i++;    //aumento i en 1 que es la variable que me da la posicion en los arreglos
    }
}


int insertarIntEnArreglo(int a[], int validos, int valor) //uso esta funcion para insertar en el arreglo de intercalado y me devuelva los validos actualizado
{
    int i;

    i = validos - 1;

    while(i>=0 && a[i]>valor)
    {
        a[i+1]=a[i];
        i--;
    }

    a[i+1]=valor;

    return validos+1;
} // podria pasar la como posicion aux-1 directamente desde la funcion de intercalado e igual en esta a i=validos, asi conservaria la misma logica que la anterior funcion de insertar usada en la de ordenamiento



void intercalarArreglosChar(char ch[], char ch2[], int validosA, int validosB, char c[])
{
    int i=0, validosC, aux=0;

    validosC = validosA + validosB;

    while(aux<validosC)
    {
        if(i<validosA)
        {
            aux = insertarCharEnArreglo(c, aux, ch[i]);
        }

        if(i<validosB)
        {
            aux = insertarCharEnArreglo(c, aux, ch2[i]);
        }
        i++;
    }
}


int insertarCharEnArreglo(char ch[], int validos, int letra)
{
    int i;

    i = validos - 1;

    while(i>=0 && ch[i]>letra)
    {
        ch[i+1]=ch[i];
        i--;
    }

    ch[i+1]=letra;

    return validos+1;
}
